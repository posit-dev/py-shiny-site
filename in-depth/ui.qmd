---
title: "Shiny UI"
format: html
---

The user interface for a Shiny application is an web page, written in HTML. See the [Shiny UI and HTML](index.qmd#the-shiny-ui-and-html) section of the Getting Started guide for a basic overview.

The HTML is generated by functions like `page_fluid()`, `panel_sidebar()`, and `input_slider()`. For example, here's a page with a slider input, a text output, and a plot output. The input is in a sidebar.

```python
from shiny import ui

app_ui = ui.page_fluid(
    ui.layout_sidebar(
        ui.panel_sidebar(
            ui.input_slider("n", "N", 0, 100, 20),
        ),
        ui.panel_main(
            ui.output_text_verbatim("txt"),
            ui.output_plot("plot"),
        ),
    ),
)
```

```{shinylive-python}
#| standalone: true
#| components: [viewer]
#| viewerHeight: 350
## file: app.py
from shiny import App, reactive, render, ui

# Import modules for plot rendering
import numpy as np
import matplotlib.pyplot as plt

app_ui = ui.page_fluid(
    ui.layout_sidebar(
        ui.panel_sidebar(
            ui.input_slider("n", "N", 0, 100, 20),
        ),
        ui.panel_main(
            ui.output_text_verbatim("txt"),
            ui.output_plot("plot", height="250px"),
        ),
    ),
)


def server(input, output, session):

    @output
    @render.text
    def txt():
        return f"n*2 is {input.n() * 2}"

    @output
    @render.plot(alt="A histogram")
    def plot():
        np.random.seed(19680801)
        x = 100 + 15 * np.random.randn(437)

        fig, ax = plt.subplots()
        ax.hist(x, input.n(), density=True)
        return fig


app = App(app_ui, server)
```


There are three broad categories of components:

* **Inputs**: Components that the user interacts with.
* **Outputs**: Display information based user input and data.
* **Layout components**: Pretty much everything else.


## Inputs

The inputs that Shiny provides are:

| Component                                                                    | Example                                             |
|------------------------------------------------------------------------------|-----------------------------------------------------|
| [`input_text()`](api/reference/shiny.ui.input_text.html)                     | [Live example](https://shinylive.io/py/examples/#text-input)                |
| [`input_numeric()`](api/reference/shiny.ui.input_numeric.html)               | [Live example](https://shinylive.io/py/examples/#numeric-input)             |
| [`input_slider()`](api/reference/shiny.ui.input_slider.html)                 | [Live example](https://shinylive.io/py/examples/#slider-input)              |
| [`input_checkbox()`](api/reference/shiny.ui.input_checkbox.html)             | [Live example](https://shinylive.io/py/examples/#checkbox-input)            |
| [`input_checkbox_group()`](api/reference/shiny.ui.input_checkbox_group.html) | [Live example](https://shinylive.io/py/examples/#checkbox-group-input)      |
| [`input_select()`](api/reference/shiny.ui.input_select.html)                 | [Live example](https://shinylive.io/py/examples/#select-input)              |
| [`input_radio_buttons()`](api/reference/shiny.ui.input_radio_buttons.html)   | [Live example](https://shinylive.io/py/examples/#radio-buttons-input)       |
| [`input_text_area()`](api/reference/shiny.ui.input_text_area.html)           | [Live example](https://shinylive.io/py/examples/#text-area-input)           |
| [`input_date()`](api/reference/shiny.ui.input_date.html)                     | [Live example](https://shinylive.io/py/examples/#date-input)                |
| [`input_date_range()`](api/reference/shiny.ui.input_date_range.html)         | [Live example](https://shinylive.io/py/examples/#date-range-input)          |
| [`input_password()`](api/reference/shiny.ui.input_password.html)             | [Live example](https://shinylive.io/py/examples/#password-input)            |
| [`input_file()`](api/reference/shiny.ui.input_file.html): File uploads       | [Live example](https://shinylive.io/py/examples/#file-upload)               |


## Outputs

For output components in the UI, there must be a matching call to `@output` in the server function. For example, here is a bare bones app with a text output with a `output_text()` named `x`. Notice that in the server function, there is a function named `x`. This corresponds to the output component in the UI named `x`, and it is executed whenever any of its reactive inputs change. This function has two decorators: `@output` and `@render.text`. The `@output` decorator tells the server function that it is an output. The `@render_text` decorator tells the server function that the return value from the function should be interpreted as a text, as opposed to, say, an image.


```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical

from shiny import App, render, ui

app_ui = ui.page_fluid(
    ui.input_slider("n", "N", 0, 100, 20),
    ui.output_text("x"),
)

def server(input, output, session):

    @output
    @render.text
    def x():
        return f"The value of n is {input.n()}"

app = App(app_ui, server)
```

Shiny provides the following output components and corresponding render functions:

| Description                                            | Output component                                                             | Render function                                                                                  | Example                                        |
|--------------------------------------------------------|------------------------------------------------------------------------------|--------------------------------------------------------------------------------------------------|------------------------------------------------|
| Text                                                   | [`output_text()`]( api/reference/shiny.ui.output_text.html)                  | [`render.text`](api/reference/shiny.render_text.html)   | [Live example](https://shinylive.io/py/examples/#text-output)          |
| Text, displayed as code                                | [`output_text_verbatim()`](api/reference/shiny.ui.output_text_verbatim.html) | [`render.text`](api/reference/shiny.render_text.html)   | [Live example](https://shinylive.io/py/examples/#verbatim-text-output) |
| Arbitrary HTML                                         | [`output_ui()`]( api/reference/shiny.ui.output_ui.html)                      | [`render.ui`](api/reference/shiny.render_ui.html)       | [Live example](https://shinylive.io/py/examples/#ui-output)            |
| Plots. Currently supports matplotlib and PIL.          | [`output_plot()`]( api/reference/shiny.ui.output_plot.html)                  | [`render.plot`](api/reference/shiny.render_plot.html)   | [Live example](https://shinylive.io/py/examples/#plot-output)          |
| Images. Supports PNG, JPEG, and other browser formats. | [`output_image()`]( api/reference/shiny.ui.output_image.html)                | [`render.image`](api/reference/shiny.render_image.html) |                                                |



:::{.callout-note}
Shiny for Python does not yet have a table output component, but we're planning on making one.
:::


## Layout examples

For many Shiny applications, you can use a simple layout consisting of a sidebar with some inputs, and a main area with some outputs. For example:

### Sidebar layout

```python
from shiny import ui

app_ui = ui.page_fluid(
    ui.layout_sidebar(
        ui.panel_sidebar(
            ui.input_slider("n", "N", 0, 100, 20),
            ui.input_checkbox("checkbox", "Checkbox", True),
        ),
        ui.panel_main(
            ui.output_text_verbatim("txt"),
            ui.output_plot("plot"),
        ),
    ),
)
```

```{shinylive-python}
#| standalone: true
#| components: [viewer]
#| viewerHeight: 350

## file: app.py
from shiny import App, render, ui

# Import modules for plot rendering
import numpy as np
import matplotlib.pyplot as plt

app_ui = ui.page_fluid(
    ui.layout_sidebar(
        ui.panel_sidebar(
            ui.input_slider("n", "N", 0, 100, 20),
            ui.input_checkbox("checkbox", "Checkbox", True),
        ),
        ui.panel_main(
            ui.output_text_verbatim("txt"),
            ui.output_plot("plot", height="250px"),
        ),
    ),
)


def server(input, output, session):

    @output
    @render.text
    def txt():
        return f"n*2 is {input.n() * 2}"

    @output
    @render_plot(alt="A histogram")
    def plot():
        np.random.seed(19680801)
        x = 100 + 15 * np.random.randn(437)

        fig, ax = plt.subplots()
        ax.hist(x, input.n(), density=True)
        return fig


app = App(app_ui, server)
```

## The Bootstrap layout system

By default, Shiny uses the [Bootstrap 5](https://getbootstrap.com/) framework for layout and styling. If you want to customize the layout of your application, you'll need to understand how the Bootstrap layout system works.

Bootstrap uses a grid system: consisting of containers, rows, and columns. (Note that the Bootstrap grid is not the same thing as CSS grid.) Containers contain rows, and each row contains 12 columns. For example, here is code that generates a page with three columns:


```{shinylive-python}
#| components: [editor, cell]
from shiny import ui

ui.page_fluid(
    ui.row(
        ui.column(4, "Column 1"),
        ui.column(4, "Column 2"),
        ui.column(4, "Column 3"),
    )
)
```


:::{.callout-note}
The `<html>` and `<head>` portion that's printed out above is generated by the `page_fluid()`. Although the head content is printed out as empty, when used in a real Shiny app, it will be populated with JS and CSS files.

For most Shiny applications, you'll want to use `page_fluid()` as the main page container.
:::


Those functions just generate HTML, which you can customize:

```{shinylive-python}
#| components: [editor, cell]
ui.page_fluid(
    ui.row(
        {"style": "border: 1px solid black;"},
        ui.column(4, "Column 1", {"style": "background-color: #eee;"}),
        ui.column(4, "Column 2", {"style": "background-color: #ddd;"}),
        ui.column(4, "Column 3", {"style": "background-color: #ccc;"}),
    )
)
```

This is what it looks like when the HTML is rendered:

```{shinylive-python}
#| standalone: true
#| components: [viewer]

from shiny import App, ui

app_ui = ui.page_fluid(
    ui.row(
        {"style": "border: 1px solid black;"},
        ui.column(4, "Column 1", {"style": "background-color: #eee;"}),
        ui.column(4, "Column 2", {"style": "background-color: #ddd;"}),
        ui.column(4, "Column 3", {"style": "background-color: #ccc;"}),
    )
)

def server(input, output, session):

    pass

app = App(app_ui, server)
```

If you need finer control over the HTML, you call the `div()` functions directly and set the HTML classes, as well as other attributes:


```{shinylive-python}
#| components: [editor, cell]
ui.page_fluid(
    ui.div(
        {"class": "row", "style": "border: 1px solid black;"},
        ui.div({"class": "col", "style": "background-color: #eee;"}, "Column 1"),
        ui.div({"class": "col", "style": "background-color: #ddd;"}, "Column 2"),
        ui.div({"class": "col", "style": "background-color: #ccc;"}, "Column 3"),
    )
)
```

See the [Bootstrap grid documentation](https://getbootstrap.com/docs/5.1/layout/grid/
) for more information about how to customize layouts in Bootstrap.

:::{.callout-note}
With the `ui.column()` function, the columns show up when the window is wide enough. If the window is very narrow, then, instead of being shown side-by-side, the columns will be stacked on top of each other. This is because `ui.column()` uses the `col-sm` classes. See the [Bootstrap documentation](https://getbootstrap.com/docs/5.1/layout/grid/) for more about how this works.
:::


## Dynamic UI

For many applications, it is useful to create user interfaces that can change. To do this, you can use `output_ui()` and, on the server side, `render.ui`. The object returned by the `render.ui` function should be a string, HTML Tag object (like `div()` or `span`), or a `TagList` object.

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]

from shiny import App, render, ui

app_ui = ui.page_fluid(
    ui.input_radio_buttons(
        "type",
        "Choose an input type",
        choices=["numeric", "checkbox", "other"],
    ),
    ui.output_ui("dyn_ui"),
)


def server(input, output, session):
    @output
    @render.ui
    def dyn_ui():
        if input.type() == "numeric":
            return ui.input_numeric("x", "X", 5)
        elif input.type() == "checkbox":
            return ui.input_checkbox("x", "X")
        else:
            return ui.div(
                "You selected",
                ui.tags.b("other", style="color: red;"),
            )


app = App(app_ui, server)

```







