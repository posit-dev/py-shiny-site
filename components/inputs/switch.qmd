---
title: "Switch"
sidebar: components 
previewapp: |
  from shiny import ui, render, App
  app_ui = ui.page_fluid(
      ui.input_switch("switch", "Make it switchable", True).add_class("mb-0"), 
      ui.output_ui("value"),
        {"class": "vh-100 d-flex flex-column justify-content-center align-items-center px-4"}
  )
  def server(input, output, session):
      @render.ui
      def value():
          return ""
  app = App(app_ui, server)
listing:
  id: component
  template: ../_partials/components-detail.ejs
  contents:
    - title: Switch
      preview: https://shinylive.io/py/app/#h=0&code=NobwRAdghgtgpmAXGKAHVA6VBPMAaMAYwHsIAXOcpMAMwCdiYACAZwAsBLCbJjmVYnTJMArhzxM6lACZw6EgILoAOhFVpUAfTFMAvKI5YoAcziaaAGzHSAFKqYODGLqhFlNLAO4cyhNnbAvHz9lfCZQgGVvXzZQiQAVOhE4AEo8e0cxDGI3V3cxAIA3KCs4ULTVFIwoaWlNQgsoFhYA1ABaAFZy1VVZGlY5QrkbFzcJHLI8iRY4Zo5SFMQMhwABCbzlphWpCFk6DDFNvqZi0ptFzcdJODIROgheCDyMIJjznuh0PSYlVBsNbTiAZ0IZ0FJgAC+AF0gA
      height: 200px
      code: |
        from shiny import ui, render, App
        
        app_ui = ui.page_fluid(
            ui.input_switch("switch", "Switch", False), #<<
            ui.output_ui("value"),
        )
        
        def server(input, output, session):
            @render.ui
            def value():
                return input.switch()
        
        app = App(app_ui, server)
      relevantfunctions:
        - title: ui.input_switch
          href: https://shiny.posit.co/py/api/ui.input_switch.html
          signature: ui.input_switch(id, label, value=False, *, width=None)
---

:::{#component}
:::

## Details

A switch allows you to select between logical values.

To add a switch to your app:

  1. Add `ui.input_switch()` to the UI of your app to create a switch. Where you call this function will determine where the switch will appear within the app's layout. 

  2. Specify the `id` and `label` parameters of `ui.input_switch()` to define the identifier and label of the switch. 

  3. By default, the `value` parameter, which defines the switch's initial value, is `False`. If you'd like the initial value to be `True`, set `value` equal to `True`.

The value of an input component is accessible as a reactive value within the `server()` function. To access the value of a switch:

  1. Use `input.<switch_id>()` (e.g., `input.switch()`) to access the value of the switch. The server value of a switch is `True` if checked and `False` otherwise. 
