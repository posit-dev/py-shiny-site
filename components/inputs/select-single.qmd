---
title: "Select (Single)"
sidebar: components 
previewapp: |
  from shiny import App, Inputs, Outputs, Session, render, ui

  app_ui = ui.page_fluid(
    ui.input_select(
        "select",
        "",
        {
            "1": {"1A": "Choice 1A", "1B": "Choice 1B", "1C": "Choice 1C"},
            "2": {"2A": "Choice 2A", "2B": "Choice 2B", "2C": "Choice 2C"}
        },
    ),
    ui.output_text("value"),
      {"class": "vh-100 d-flex justify-content-center align-items-center px-4"}
  )

  def server(input: Inputs, output: Outputs, session: Session):
      @output
      @render.text
      def value():
          return f""

  app = App(app_ui, server)
listing:
  - id: component
    template: ../_partials/components-detail.ejs
    contents:
      - title: Select List
        preview: https://shinylive.io/py/app/#h=0&code=NobwRAdghgtgpmAXGKAHVA6VBPMAaMAYwHsIAXOcpMAMwCdiYACAZwAsBLCbJjmVYnTJMAgujxM6lACZw6EgK4cAOhFVpUAfSVMAvEyVYoAcziaaAGyXSAFKqYODHDF1QKymlnAtxCZG0wAxAA8wfaOEcpgXj5+URIhYRARkWAAyt6+wlDJxKhkHKRMAEbexADuiPFBoeEpTCBRAIwiUYhMUQDCbMQchHBMLdXNAEJtHWDdvf2DY-gTTZ3jXT19A4tRAL4JtcmOAJQ7SRGGxO5uHhQAHv5RAG5QVnBRh6r7qqqyNKxyd3I2rncEjOZAuEi8LBYhQg+yqewcAAEpBBZHQMNcyHUmF8mA8njZYViIlIyAo6MkaFEQICyBgYlkCZsoh9oOg9KJ0DYNNoOODfnJ9mBNgBdIA
        height: 200px
        code: |
          from shiny import App, render, ui
          
          app_ui = ui.page_fluid(
              ui.input_select( #<<
                  "select", #<<
                  "Select an option below:", #<<
                  {"1A": "Choice 1A", "1B": "Choice 1B", "1C": "Choice 1C"}, #<<
              ), #<<
              ui.output_text("value"),
          )
          
          def server(input, output, session):
              @render.text
              def value():
                  return f"{input.select()}"
          
          app = App(app_ui, server)
        relevantfunctions:
          - title: ui.input_select
            href: https://shiny.posit.co/py/api/ui.input_select.html
            signature: ui.input_select(id, label, choices, *, selected=None, multiple=False, selectize=False, width=None, size=None)    
        
  - id: variations
    template: ../_partials/components-variations.ejs
    contents:
      variations:
        - title: Select list with grouped choices
          description: To group the choices into categories, supply the `choices` argument with a dictionary of dictionaries. `ui.input_select()` will use the top-level keys as group labels.
          preview: https://shinylive.io/py/app/#h=0&code=NobwRAdghgtgpmAXGKAHVA6VBPMAaMAYwHsIAXOcpMAMwCdiYACAZwAsBLCbJjmVYnTJMAgujxM6lACZw6EgK4cAOhFVpUAfSVMAvEyVYoAcziaaAGyXSAFKqYODHDF1QKymlnAtxCZG0wAxAA8wfaOEcpgXj5+URIhYRARkWAAyt6+wlDJxKhkHKRMAEbexADuiPFBoeEpTCA1SfX1UQCMUYgN7SKdTFEAwmzEHIRwTG29+P1gbQBCfYPDo+Pz1e0Di2BDI2MTm2AAvgm1yS2pAEx9IFEXU11Lu+N362AXC0gzOytM768XBwe22WewBUUOTTqKWOkLODgAlCdmo5DMR3G4PBQAB7+KIANygVjgUURqnhqlUshorDkeLkNlc7gkaLIGIkXhYLEKEHhVThTAAAlIILI6BhsWQoVSmASiTZeVCIlIyAo6MkaFEQIyyBgYll5YcohToOg9KJ0DYNNoOOzaXJ4UcALpAA
          code: |
            from shiny import App, render, ui
            
            app_ui = ui.page_fluid(
                ui.input_select( #<<
                    "select", #<<
                    "Select an option below:", #<<
                    { #<<
                        "1": {"1A": "Choice 1A", "1B": "Choice 1B", "1C": "Choice 1C"}, #<<
                        "2": {"2A": "Choice 2A", "2B": "Choice 2B", "2C": "Choice 2C"} #<<
                    }, #<<
                ), #<<
                ui.output_text("value"),
            )
            
            def server(input, output, session):
                @render.text
                def value():
                    return f"{input.select()}"
            
            app = App(app_ui, server)
---

:::{#component}
:::

## Details

A select list creates a way to select one or more items from a list.

To use a select list that allows you to select a <em>single</em> item: 

  1. Add `ui.input_select()` to the UI of your app to create a select list. Where you call this function will determine where the select list appears within the app's layout. 

  2. Specify the `id` and `label` parameters of `ui.input_select()` to define the identifier and label of the select list.

  3. Supply the `choices` parameter with either a list or dictionary of choices. If `choices` is a list, its elements become the select list values and labels. If `choices` is a dictionary, `ui.input_select()` uses the dictionary keys as the list values and the dictionary values as the list labels. 
  
  You can also supply with `choices` a dictionary of dictionaries. `ui.input_select()` will use the top-level keys as group labels. See the <em>Select list with grouped choices</em> variation.

  4. The `multiple` parameter controls whether you can select multiple items at once. By default, `multiple` is `False`.

The value of an input component is accessible as a reactive value within the `server()` function. To access the value of a select list:

  1. Use `input.<select_id>()` (e.g., `input.select()`) to access the selected value. The server value of a select list is a list of strings. When `multiple=False`, this list will have length 1.

See also: [Select (Multiple)](select-multiple.qmd) and [Selectize (Multiple)](selectize-multiple.qmd). Select inputs and selectize inputs are similar, but have different interfaces and provide different ways of selecting multiple options. Selectize inputs also allow you to deselect items.

:::{#variations}
:::