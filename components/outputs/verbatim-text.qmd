---
title: "Verbatim Text"
sidebar: components 
previewapp: |
  from shiny import App, render, ui

  app_ui = ui.page_fluid(
      ui.input_text("x", "", placeholder="Enter text"),
      ui.output_text_verbatim("txt"),
      {"class": "vh-100 d-flex justify-content-center align-items-center flex-column px-4"}
  )

  def server(input, output, session):
      @output
      @render.text
      def txt():
          return f'x: "{input.x()}"'

  app = App(app_ui, server, debug=True)
listing:
  - id: component
    template: ../_partials/components-detail.ejs
    contents:
      - title: Verbatim Text
        preview: https://shinylive.io/py/app/#h=0&code=NobwRAdghgtgpmAXGKAHVA6VBPMAaMAYwHsIAXOcpMAMwCdiYACAZwAsBLCbJjmVYnTJMAgujxM6lACZw6EgK4cAOhFVpUAfSVMAvEyVYoAcziaaAGyXSAFKqYODHDF1QKymigA8ydsABU4H2V8JhCAUXI5Jm8yEIkQgAk4CwtiJgBlTm4QgEo8e0dDYnc3D1jNADc5ACMoMj4-WLymAGIAHnbVXNVVWRpWOWq6G1d3CRKyMokWOBYWDlJcxEKHAAEpCFk6DFi2ztWmfpig32XDx0k4MgU6CF4IMoxAnxsetWh0PVF0Gw1tDgzIZyXJgAC+AF0gA
        height: 200px
        code: |
          from shiny import App, render, ui

          app_ui = ui.page_fluid(
              ui.input_text("Text", "Enter text", "Hello Shiny"),
              ui.output_text_verbatim("text") #<<
          )
          
          def server(input, output, session):
              @render.text #<<
              def text():
                  return input.Text()
          
          app = App(app_ui, server)
        relevantfunctions:
          - title: ui.output_text_verbatim
            href: https://shiny.posit.co/py/api/ui.output_text_verbatim.html
            signature: ui.output_text_verbatim(id, placeholder=False)
          - title: "@render.text"
            href: https://shiny.posit.co/py/api/render.text.html
            signature: render.text(fn=None)
  - id: variations
    template: ../_partials/components-variations.ejs
    contents:
      variations:
        - title: Placeholder rectangle when string is empty
          description: Verbatim text with a placeholder when the string to display is empty (see Details above).   
          preview: https://shinylive.io/py/app/#h=0&code=NobwRAdghgtgpmAXGKAHVA6VBPMAaMAYwHsIAXOcpMAMwCdiYACAZwAsBLCbJjmVYnTJMAgujxM6lACZw6EgK4cAOhFVpUAfSVMAvEyVYoAcziaaAGyXSAFKqYODHDF1QKymigA8ydsABU4H2V8JhCAUXI5JkDg0JCQgEo8e0dDYnc3D28PADc5ACMoMj4-HJCJVAsoQjg2YgtZOj0YugU4RKYAYgAeHtVE1VVZGlY5fLobV3cJDLIsiRY4FhYOUkTEVIcAASkIJoxyiEcmEaYcmw2tk8k4MgU6Y+myDFjfQbVodBaxVBsNbQcRbjOSJMAAXwAukA
          code: |
            from shiny import App, render, ui
    
            app_ui = ui.page_fluid(
                ui.input_text("Text", "Enter Text", ""),
                ui.output_text_verbatim("text", placeholder = True) #<<
            )
            
            def server(input, output, session):
                @render.text #<<
                def text():
                    return input.Text()
            
            app = App(app_ui, server)

---

:::{#component}
:::

## Details

Verbatim text displays a character string as monospaced code in a shaded rectangle.

To create reactive verbatim text, render the text in the server function with the decorators `@render.text`, just as you would to display [normal text](text.qmd). Then place the rendered text in the ui with `ui.output_verbatim_text()`.

By default, `ui.output_verbatim_text()` will display nothing when the string to display is empty. To ensure that `ui.output_verbatim_text()` displays an empty shaded rectangle as a placeholder even when when the string to display is empty, set `placeholder=True`.

See [Text](text.qmd) to display string values as normal text.

:::{#variations}
:::