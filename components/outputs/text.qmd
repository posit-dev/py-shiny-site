---
title: "Text"
sidebar: components 
previewapp: |
  from shiny import App, render, ui

  app_ui = ui.page_fluid(
      ui.input_text("x", "", placeholder="Enter text"),
      ui.output_text("txt"),
      {"class": "vh-100 d-flex justify-content-center align-items-center px-4 flex-column"}
  )

  def server(input, output, session):
      @output
      @render.text
      def txt():
          return f'x: "{input.x()}"'

  app = App(app_ui, server, debug=True)

listing:
  id: component
  template: ../_partials/components-detail.ejs
  contents:
    - title: Text
      preview: https://shinylive.io/py/app/#h=0&code=NobwRAdghgtgpmAXGKAHVA6VBPMAaMAYwHsIAXOcpMAMwCdiYACAZwAsBLCbJjmVYnTJMAgujxM6lACZw6EgK4cAOhCbqNG1WlQB9JUwC8TJVigBzOLpoAbJdIAUqjaa6oFZXRQAeZJ2AAVOF9lfCZQgFFyOSYfMlCJUIAJOBsbYiYAZU5uUIBKPGd1UIBNYgUmSgopaUQEopMODHKyd084-zj81TyG4ohZGlY5ADc5BzcPCRa2iRY4FhYOUjy6tXUAASkBuQwu9aZB2OC-Vb71KTIFOjVJsgwg3wdeg-6dI1F0Bx19DjnRuR5MAAXwAukA
      code: |
         from shiny import App, render, ui
         
         app_ui = ui.page_fluid(
             ui.input_text("Text", "Enter text", "Hello Shiny"),
             "You entered:",
             ui.output_text("text") #<<
         )
                 
         def server(input, output, session):
             @render.text #<<
             def text():
                 return input.Text() 
                 
         app = App(app_ui, server)
      relevantfunctions:
        - title: ui.output_text
          href: https://shiny.posit.co/py/api/ui.output_text.html
          signature: ui.output_text(id, inline=False, container=None)
        - title: "@render.text"
          href: https://shiny.posit.co/py/api/render.text.html
          signature: render.text(fn=None)

      variations:
        - title: Inline text
          description: Set `inline=True` within `ui.output_text()` to have text appear inline with the text that preceeds it.   
          preview: https://shinylive.io/py/app/#h=0&code=NobwRAdghgtgpmAXGKAHVA6VBPMAaMAYwHsIAXOcpMAMwCdiYACAZwAsBLCbJjmVYnTJMAgujxM6lACZw6EgK4cAOhFVpUAfSVMAvEyVYoAcziaaAGyXSAFKqYODHDF1QKymigA8ydsABU4H2V8JhCAUXI5Jm8yEIkQgAk4CwtiJgBlTm4QgEo8e0cQgE1iBSZKCilpRDDQwzKyNw9Yv1j43ggLLjg9Jn86BThc1RGIRwmwiFkaVjkANzkbV3cJRuaJFjgWFg5SXMRChwABKWm5DHbxxxmYoN8Do8mpMgU6cZWyDECfGzH1dB9MSoGwabQcTYLOS5MAAXwAukA
          code: |
            from shiny import App, render, ui
            
            app_ui = ui.page_fluid(
                ui.input_text("Text", "Enter text", "Hello Shiny"),
                "You entered: ", ui.output_text("text", inline = True) #<<
            )
                    
            def server(input, output, session):
                @render.text
                def text():
                    return input.Text()
                    
            app = App(app_ui, server)

---

:::{#component}
:::

## Details

<p>Text displays a character string as normal text. </p>

<p>To make reactive text, follow three steps:</p>
  
<ol>
  <li>Call `ui.output_text()` in the UI of your app to create a div in which to display the text. Where you call this function within the UI functions will determine where the text will appear within the layout of the app. Set the id argument of `ui.output_text()` to a unique value.</li>

  <li>Within the server function, define a new function whose name matches the id used above. The function should return the text to display. Shiny will rerun this function whenever it needs to build or update the output that has the matching id.</li>

  <li>Decorate the function with `@render.text`</li>
</ol>

<p>See [Verbatim Text](TODO: ADD LINK TO VERBATIM TEXT) to display string values as they would appear in a computer console, in monospaced font on a shaded background.</p>
