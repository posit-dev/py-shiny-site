---
title: "Plot (Plotly)"
sidebar: components
preview: |
  <div class="px-3">
  <img style="width: 100%;height:auto;max-height:130px;" src="/images/plotly.jpg">
  </div>
listing:
  id: component
  template: ../_partials/components-detail.ejs
  contents:
    - title: "Plot (Plotly)"
      preview: https://shinylive.io/py/app/#h=0&code=NobwRAdghgtgpmAXGKAHVA6VBPMAaMAYwHsIAXOcpMASxlWICcyACVAG2LPewzgA9UjOAGcRLKONT8AOhABmjYjDZR28RqkoBzAK40I4ug2YtOUACYB9LRD0GRcxcpYiAFgewtjTVgEF0PBZhKEIyGgA3OCD9JyUVd08AdxoLbTgyI3pfFmJdMlR8qxS0jKDhCAs4RmLU9NYWAGIAHma5OTRUK30WAF4WfSwodKt5dn0LAAo5FlmBmgwDQrIrEXZU6unIGXwWHYA5XRgAI2rc+RZjhx2ggEY7gAYHoIAmB4BKPBm5vIKikvqWw4XB2n1mLTaEHe7QgciqFxE1SijEmS3yQV+yyCiLENFI70Q31mAAEKlUagCMuCWK0iSx4WxOGRJgS6XM2Dp9IY+mZiJYbJyHCy2XMRIQoGQKJomTzpBgPCIyMRtIxYNMIOzNXMLBKoKNVfBerZ7IYgvxejtjsQLNgrDBJCIrNobiwIFdDL00WQMBBhRqtSx3hhdKgdRQrOwoNhfuqA5rwtw4L0QDsKPwyDtEHswAAFQUagCyDpdO1kSBYDwwAFYAL5ff1x2bYKD8GiOhPsJM7ADCeXINxFWv4LbbVg7XbAACFrV4i2IWJNtND8IPAzC48IyLpGBqxRKpcCGhCYR10DyAqhJp1ujRsUjqtCIGAawBdIA
      height: 500px
      code: |4
          import plotly.express as px
          from palmerpenguins import load_penguins
          from shiny import App, reactive, ui
          from shinywidgets import output_widget, render_widget  #<<

          app_ui = ui.page_fluid(
              ui.input_slider("n", "Number of bins", 1, 100, 20),
              output_widget("plot"),  #<<
          )

          def server(input, output, session):
              @render_widget  #<<
              def plot(): #<<
                  penguins = load_penguins()
                  scatterplot = px.histogram(
                      data_frame=penguins, x="body_mass_g", nbins=input.n()
                  ).update_layout(
                      title={"text": "Penguin Mass", "x": 0.5},
                      yaxis_title="Count",
                      xaxis_title="Body Mass (g)",
                  )

                  return scatterplot  #<<

          app = App(app_ui, server)

      relevantfunctions:
        - title: shinywidgets.output_widget
          href: https://github.com/posit-dev/py-shinywidgets/blob/main/shinywidgets/_shinywidgets.py#L58
          signature: shinywidgets.output_widget(id, width, height)
        - title: "@shinywidgets.render_widget()"
          href: https://github.com/posit-dev/py-shinywidgets/blob/main/shinywidgets/_shinywidgets.py#L213
          signature: shinywidgets.render_widget(fn)

---

:::{#component}
:::

## Details

Plotly is an interactive graphics plotting library. 

To make an interactive plot with Plotly in Shiny for Python, we will need to use the `shinywidgets` library to connect Shiny with `ipywidgets`.

To make a plotly figure, we need to do the following steps:

  1. Import the `output_widget()` and `render_widget()` functions from the `shinywidgets` library,
  `from shinywidgets import output_widget, render_widget`

  2. Call `output_widget()` to the UI of your app to create a div in which to display the figure. Where you call this function will determine where the figure will appear within the layout of the app. The `id` parameter you provide will be used to link to other parts of the Shiny app.

  3. Define a function within the `server()` function that creates the figure.

      - The name of the function should be the same value you passed into the `id` parameter in your `output_widget()` function call in the UI.

      - If your function calls reactive values, Shiny will update your figure whenever those values change, in a [reactive fashion](https://shiny.posit.co/py/docs/reactive-programming.html).

  4. Decorate your plotting function with a `@render.plot()` decorator.

        - If your plotting function is not the same as the `id` you used in the `ui.output_plot()`, you can add an additional `@output(id=...)` decorator.
        - If you use the `@output()` decorator, make sure it is __above__ the `@render.plot()` decorator.

 Visit [shiny.posit.co/py/docs/ipywidgets.html](https://shiny.posit.co/py/docs/ipywidgets.html) to learn more about using ipywidgets with Shiny. 