---
title: Plot (Matplotlib)
sidebar: components
preview: '<div class="px-3">

  <img style="width: 100%;height:auto;max-height:130px;" src="/images/matplotlib.jpg">

  </div>

  '
listing:
- id: example
  template: ../../_partials/components-detail-example.ejs
  template-params:
    dir: components/outputs/plot-matplotlib/
  contents:
  - title: Preview
    file: app-core.py
    height: 500
  - title: Express
    file: app-express.py
    shinylive: https://shinylive.io/py/editor/#code=NobwRAdghgtgpmAXAAjFADugdOgnmAGlQGMB7CAFzkqVQEsZ1SAnC5GKC9AG1Iu7oAjHLh59kUAM7IeFADoQAZs1IwZUbvGbpqAcwCudCNIZNWyXlAAmAfR0QDRyQuWrkkgBZHcyUyzbM1FZwzC4qap7eWHAAHuiBkiaM-r4Q6PoURIYKCoZYRukUNpICwcwAFHKQVURVAHL6MIIhyKSKyIJONcgADEQAjD19yABMPQCUORAKAAKBEGU4vBTlGhQAvFUAgshekhSkusywVePIyADEyAA81wrB7WIr4yiXN3cQ5+dW7esWpNY7HpDMZypNPl8OIlkH8fsAqoJSFZcDYoZIbLoqgBdKZfZCKOi6IhQGIwmTcChYST6QRPSRghR4klYPYrNFEAoZLAQMFEYLGOgUXDrAAqzH0cHBTJiVLgRQogu4cEqYAAChotMhVcCjMgALJSSRwZxgKVfZlGooxbhQZrcFUG6HlXSTU2M80yy02XA2u0qgAi1Ekgtwp1xX0CFH0zE+BN05yutwUhFQQp0tDAVBiFDAAF8sUA
  - title: Core
    file: app-core.py
    shinylive: https://shinylive.io/py/editor/#code=NobwRAdghgtgpmAXAAjFADugdOgnmAGlQGMB7CAFzkqVQEsZ1SAnC5GKC9AG1Iu7oAjHLh59kUAM7IeFADoQAZs1IwZUbvGbpqAcwCudCNIZNWyXlAAmAfR0QDRyQuWrkkgBZHcyUyzYAgphEzNRWcMxEhgoKGOg2hsgAvMiGOFC6cDaK3IZWABQKyMWpdFhG6PoUNpIC4cyFkHKEyM0AcvowghHIpIrIgk7NRAAMRACMI2PIAEwjAJQERSVppFWV1WIUjVvNi8UAxAA8RwrzMRDh-ZIRAG4R+RVVRGtcz+5wkpJ05POIy8UAAKhS4RHC8bYaChJZoBZBeSQUUi6ZiwPaHE4A5BXGQQ-J-DGnCAlEnY-opSy2eyOYz4rEkjhfZJk4DNQSkKy4GyMyQ2XTNAC6F1JJUUdF0RCgAA9mbIsJJ9IItpI6cSRRIpVgEdseUQnhQsBB8URwsY6BRcEkACrMfRwc5qkXS+VwaoUc3cOCNAAKGi0yG9ekMxIAslIbs4wA71RqXdUpdwoN1uI0w0z8rpzlH6SVnTdqrhE8nGgARajfC17YXq0IUfTMYli3SEi5xZlBdD5OIJOhEG7Me6RbFwQT6XTW232hQtMAWnS0WdwKUUMAAXwFQA
- id: relevant-functions
  template: ../../_partials/components-detail-relevant-functions.ejs
  template-params:
    dir: components/outputs/plot-matplotlib/
  contents:
  - title: ui.output_plot
    href: https://shiny.posit.co/py/api/ui.output_plot.html
    signature: ui.output_plot(id, width='100%', height='400px', *, inline=False, click=False,
      dblclick=False, hover=False, brush=False, fill=MISSING)
  - title: '@render.plot'
    href: https://shiny.posit.co/py/api/render.plot.html
    signature: render.plot(_fn=None, *, alt=None, width=MISSING, height=MISSING, **kwargs)
- id: variations
  template: ../../_partials/components-variations.ejs
  template-params:
    dir: components/outputs/plot-matplotlib/
  contents:
  - title: Plot as input
    description: Use the `click`, `dblclick`, `hover`, and `brush` arguments of `ui.output_plot()`
      to collect information about the user's mouse interactions as a reactive variable.
      The app below displays the values returned, but you can also call the values
      from within your computations to filter tables, perform calculations, and so
      on.
    apps:
    - title: Preview
      file: app-variation-plot-as-input-core.py
      height: 720
    - title: Express
      file: app-variation-plot-as-input-express.py
      shinylive: https://shinylive.io/py/editor/#code=NobwRAdghgtgpmAXAAjFADugdOgnmAGlQGMB7CAFzkqVQEsZ1SAnC5GKC9AG1Iu7oAjHLh59kUAM7IeFADoQAZs1IwZUbvGbpqAcwCudCNIZNWyXlAAmAfR0QDRyQuWrkkgBZHcyUyzbM1FZwzC4qap7eWHAAHuiBkiaM-r4Q6PoURJL6kva2VnS53FC4RIYKCoZYpBnpFHa8FAAUCshtyHJgYvKEre3EAsQA1gC8ACrM+nBEyADEyAA8C31tVoLcA3TD45PTbfNLK8gepABuITtTMwfLEO3IgpOel3tzi7cAlBUQnQDCg0NEJ1KnRqrUMjYqDF6udmIJOAwWmABkNOkQeFBiHATtxgswXl8fmAACI1dZwZD-LaA4EQKo1LgQqEwkLwiiIzprDbcVGEGTFLE4vEEipgAASZxCQLAILBjPqzJssLZHLAHlOoT5GMFpFxFwmU0JnQAQk8PLT6eCFbEWXCETAkY9PGj+ZjsbrhQa4EafhAAO50Cgedw5PI2ApFEpND5Au7teYAOT4FKDnGQQcKyAAonEEtIMOhkDk4NIAAbZXJBcOFDG4aOl9ykdMeNN+inEKC++7zDh0jTcHzWKzNimly3yhp8esSCDDvgeELSChNoMU9BQXRwLDfe4AAUCs5COEaTQ0FBGnQAgsdCsvdMxYJ1Cfdgop+VOY0cX2+RhZSNY7D0QxjGjL92g4RJkF-KxFGATpBFIKxcBsCDJBsXROgAXTAtpBDobhuCg5AYLgsA8IImxuD0IMUJgLCd3udpZCwSQOwoKhmCaVCiHI7hn0YtpmJiYpBDgbgkQAWSkaQml0L4wH4gTmNwESxKRY18MIgAZajgy4mB5MUxjmPZfg4CRAAFICjGQKTINOaQNII5AdIcIMnwYtp9yCI9mSOV9kBRaNYwEtpAgofRmDuIw6mPPgbE2YZQK7dpvMPZgsD8uNVjgN8uSCz9ssY8LIuitIMji+p8oBZKjjSvFMptfzcuODVgpw5ASqi1JYu6GwTlhWqivq3ymqKgKnQ8dqivuLqyt6xobEeHIpsJPkwAoUQEBQDabTAABfTCgA
      height: 720
    - title: Core
      file: app-variation-plot-as-input-core.py
      shinylive: https://shinylive.io/py/editor/#code=NobwRAdghgtgpmAXAAjFADugdOgnmAGlQGMB7CAFzkqVQEsZ1SAnC5GKC9AG1Iu7oAjHLh59kUAM7IeFADoQAZs1IwZUbvGbpqAcwCudCNIZNWyXlAAmAfR0QDRyQuWrkkgBZHcyUyzYAgphEzNRWcMxEhgoKGOg2hsgAvMiGOFC6cDaK3IZWABQKyMWpdFik+lyVdrwUhRAljchyYGLyhM0NTcXEAsQA1kkAKsz6cEQAxAA8U0XdyFaC3L10A8Oj48jTs13dHqQAbhHrY5Mzc92Co54ncFvnu8gAlAQXzWAAwn39iC2vj2kKlUKDYqAAPEFHZiCTgMQpgXr9P4ybhQYhwfbccLMW4vN4tAAiFSWdy+qx+fzegMq6Gq4MhERhFDhLUWy24SI6PDRGNIWOOIzGeMeLQAEocIr9CFSykDaSD6TYoUyWWAPAdmMjuejMdjcf9Gi0AELXDyUgGyml0uAQpWM2EweFXTxa1E6vl6wVwYVPGIQcKKdwRKH5IzyohyypESRwSSSOjkJ6-R4AAVC-oiOFq+Q0FCSLQCyC8kgopF0zFgLV9jwDKL4+STb0aVkDKUstnsjmMDabJQ4ceSC0UwBaglIVlwNn7khsuhaAF1e8VBHRuNxBy2R2AV2ubNw9BQPFOYAu-fMURQsJJiJwqMx8tOiDvuNXz7IsGDUYI4Nx4QBZKRpHyXRfTAV95nfXAvx-eEjVXdcABkDw8ZAHxgUDwO6d9mX4OB4QABT0QwGgAgcDmkOC12QJCHEPKszxKNMwkzek3lrREG2Tc9QgofRmAaMNKizPgbBWAYewgN4mIzZgsFYms4EDNkOMbR5Gh4viBIgeVhJBZTvgkqT02xOSbXkBTA3Ve9VO4uBeP43xtKEtobH2ENqyM5jZPk5tFOQZ0PE4pdkA0hzBMvFyrn0TwJPPWJMEHIJ0BzTAEjoaNgwiIhwkEfRdFxBQOjAChRAQFBirMsAAF95yAA
      height: 720
---

:::{#example}
:::

:::{#relevant-functions}
:::

## Details

[Matplotlib](https://matplotlib.org/) is a popular Python library that can be used to create plots.

Follow three steps to display a Matplotlib figure in your app:


  1. Add `ui.output_plot()` to the UI of your app to create a div in which to display the figure.
  Where you call this function will determine where the figure will appear within the layout of the app.
  The `id` parameter you provide will be used to link to other parts of the Shiny app.

  2. Define a function within the `server()` function that creates the figure.

      - The name of the function should be the same value you passed into the `id` parameter
        in your `ui.output_plot()` function call in the UI.

      - If your function calls reactive values, Shiny will update your figure whenever those values change,
in a [reactive fashion](https://shiny.posit.co/py/docs/reactive-programming.html).

      - If you use `matplotlib.pyplot` to plot, your function does not need to return a value. Otherwise, your function should return one of the following objects:

          - A `matplotlib.figure.Figure` instance
          - A `matplotlib.artist.Artist` instance
          - A list/tuple of `Figure`/`Artist` instances
          - An object with a ‘figure’ attribute pointing to a `matplotlib.figure.Figure` instance
          - A `PIL.Image.Image` instance

  3. Decorate your plotting function with a `@render.plot()` decorator.

      - If your plotting function is not the same as the `id` you used in the `ui.output_plot()`, you can add an additional `@output(id=...)` decorator.
      - If you use the `@output()` decorator, make sure it is __above__ the `@render.plot()` decorator.


## Plots as Inputs


You can use a plot as an input widget, collecting the locations of user clicks, double clicks, hovers, and brushes. To do this, set one or more of the following arguments of `ui.output_plot()` to `True`:.

  1. `click` - When `click = True`, the plot will allow the user to click in the plotting area, and will send the coordinates of the click to the server, where they can be accessed as a reactive variable named `input.<id>_click()`, where `<id>` is the id of the plot. The input value will be a dictionary with x and y elements indicating the mouse position.

  2. `dblclick` - This is just like the click parameter, but for double-click events. The value can be accessed as `input.<id>_dblclick()`.

  3. `hover` - When `hover = True`, the plot will allow the user to hover over the plotting area, and will send the coordinates of the cursor to the server, where they can be accessed as a reactive variable named `input.<id>_hover()`, where `<id>` is the id of the plot. The input value will be a dictionary with x and y elements indicating the mouse position. To control the hover time or hover delay type, set `hover` to `hover_opts()`.

  4. `brush` - When `brush = True`, the plot will allow the user to “brush” in the plotting area, and will send information about the brushed area to the server, where it can be accessed as a reactive variable named `input.<id>_brush()`, where `<id>` is the id of the plot. Brushing means that the user will be able to draw a rectangle in the plotting area and drag it around. The value will be a named list with xmin, xmax, ymin, and ymax elements indicating the brush area. To control the brush behavior, set `brush` to `brush_opts()`.

  Multiple `output_image()`/`output_plot()` calls may share the same id value; brushing one image or plot will cause any other brushes with the same id to disappear.

:::{#variations}
:::
