---
title: Plot (Matplotlib)
sidebar: components
preview: '<div class="px-3"> <p class="mb-0"> <img style="width: 100%;height:auto;max-height:130px;"
  src="/images/matplotlib.jpg"> </p> </div> '
listing:
- id: example
  template: ../../_partials/components-detail-example.ejs
  template-params:
    dir: components/outputs/plot-matplotlib/
  contents:
  - title: Preview
    file: app-core.py
    height: 500
  - title: Express
    file: app-express.py
    shinylive: https://shinylive.io/py/editor/#code=NobwRAdghgtgpmAXAAjFADugdOgnmAGlQGMB7CAFzkqVQEsZ1SAnC5GKC9AG1Iu7oAjHLh59kUAM7IeFADoQAZs1IwZUbvGbpqAcwCudCNIZNWyXlAAmAfR0QDRyQuWrkkgBZHcWOAA90ZjhJE0YWNiN0fQoiIIgrOGYiQwUFQyxI6JtJAQTmAAo5SCKiIoA5fRhBRORSRWRBJxLkAAYiAEYWtuQAJhaASlSIBQABOLycXgp8jQoAXiKAQWQvSQpSXWZYIv7kZABiZAAeI4UE+rFp-pQD49OIPb2rermLUms7PUNjfMGHx44IWQr2ewCKglIVlwNkBkhsuiKAF0ho9kIo6LoiFA-MCZNwKFhJPpBJdJL8FKjsVhVtNYURMgSIL8iAljHQKLg5gAVZj6OB-Sl+QlwCg2Cjs7hwQpgAAKGi0yBlXyMyAAslJJMEdhTHlTNaK-NwoNVuNL1UD8rpBmABbqhfqbLgjSbpQARaiSdm4bXDf57IIUfTMB7o3R7Q4nBSEVAcnS0MBUPwUMAAX0RQA
  - title: Core
    file: app-core.py
    shinylive: https://shinylive.io/py/editor/#code=NobwRAdghgtgpmAXAAjFADugdOgnmAGlQGMB7CAFzkqVQEsZ1SAnC5GKC9AG1Iu7oAjHLh59kUAM7IeFADoQAZs1IwZUbvGbpqAcwCudCNIZNWyXlAAmAfR0QDRyQuWrkkgBZHcyUyzYAgphEzNRWcMxEhgoKGOg2hsgAvMiGOFC6cDaK3IZWABQKyMWpdFhG6PoUNpIC4cyFkHKEyM0AcvowghHIpIrIgk7NRAAMRACMI2PIAEwjAJQERSVppFWV1WIUjVvNi8UAxMgAPMcK8zEQCuH9khEAbhH5FVVEa1yv7nCSknTk84hlsUAAKhCD1HC8bYaChJZoBZBeSQUUi6ZiwPaHE5nCAlZA3GRQ-IArGnIF4-H9FKWWz2RzGYnkvEcH7JSnAZqCUhWXA2FmSGy6ZoAXUuFJKijouiIUAAHmzZFhJPpBFtJIzceKJLKsEjtvyiC8KFgIMSiOFjHQKLgkgAVZj6OAXTXiuVKuDVChW7hwRoABQ0WmQfr0hlxAFkpHdnGBnVrte7qrLuFButxGpHWfldBdY0ySm67tVcCm040ACLUX7WvZirWhCj6Zi4yW6Uk4y5xNlBdD5OIJOhEO7MR6RfFwQT6XR2h1OhQtMDWnS0RdwWUUMAAX2FQA
- id: relevant-functions
  template: ../../_partials/components-detail-relevant-functions.ejs
  template-params:
    dir: components/outputs/plot-matplotlib/
  contents:
  - title: ui.output_plot
    href: https://shiny.posit.co/py/api/ui.output_plot.html
    signature: ui.output_plot(id, width='100%', height='400px', *, inline=False, click=False,
      dblclick=False, hover=False, brush=False, fill=MISSING)
  - title: '@render.plot'
    href: https://shiny.posit.co/py/api/render.plot.html
    signature: render.plot(_fn=None, *, alt=None, width=MISSING, height=MISSING, **kwargs)
- id: variations
  template: ../../_partials/components-variations.ejs
  template-params:
    dir: components/outputs/plot-matplotlib/
  contents:
  - title: Plot as input
    description: Use the `click`, `dblclick`, `hover`, and `brush` arguments of `ui.output_plot()`
      to collect information about the user's mouse interactions as a reactive variable.
      The app below displays the values returned, but you can also call the values
      from within your computations to filter tables, perform calculations, and so
      on.
    apps:
    - title: Preview
      file: app-variation-plot-as-input-core.py
      height: 720
    - title: Express
      file: app-variation-plot-as-input-express.py
      shinylive: https://shinylive.io/py/editor/#code=NobwRAdghgtgpmAXAAjFADugdOgnmAGlQGMB7CAFzkqVQEsZ1SAnC5GKC9AG1Iu7oAjHLh59kUAM7IeFADoQAZs1IwZUbvGbpqAcwCudCNIZNWyXlAAmAfR0QDRyQuWrkkgBZHcWOAA90ZjhJE0YWNiN0fQoiIIgrOGYiQxcVNU9vLENkU3DkUmioihsyBKICrmi7XnkIBQqi6r4ACgVkduQ5MDF5QjaO4gFiAGsAXgAVZn04ImQAYmQAHkX+9qtBbkG6EYmpmfaF5dXkD1IAN0Td6dnDlYgO5EEpzyv9+aW7gEoFH7AAYSGw0QXXqhSqpTgrTAg2GXSIPCgxDgp24CWYr2+dTAABEChs4MgAdsgSCIA1waQElD1ptuLDCDJuIjkaRUZdJtNMV0ABLnRLAsCgyrFCFQjxnZhwxnMlFojG-ABCzw8pPJIspkK6T08UoRSNl7L2XLqEAA7nQKB5kIYsLLmp9gfcOgsAHJ8AmWzjIS10aQAUQCQRCEkw1skwWQAAMbXbPpH3KRvR4vaaCcQoCaHgsOBB9BpuLgJFYrEmCZG1U0KPb4xmS+WweqqXHvYnLQT0FBdHAsMcAAJxNE4GrNDQUUZdACCJ19FFIumYsC6mIeCUUjJaDuOK7XowspGsdj0hmM9q3HQ4wd3VkUwC1lNwNgvkhsui6AF0z+1BHRuNxkFeby1H9uBsbg9EtR8YHfH4nQedpZCwSR0woKhmGaJ8iG-X9lzg+DuAoLA-CZQQ4G4KEAFkpGkZpdG+MAcNwhDcGI0ioQVYDkAAGXAq10JgOiGLghCKAtMCoQABSPIxkEo4Mzmkdjfy4nilxgh5+2oQcIWOVdkBhe1HVw9oggofRmHuSJoiHPgSkBU9Mw6DT4kSLBtNg5BdJpfTN3ch4TLMiyICKazii8uzjXUgcXLclc4DXcU0J8ozkH88yciCqyehsU4LkStTHKi5hXI1HS4seZhPAMz8UrgUy0ssgisqefRKsxBkwAoUQEBQDr-AoMAAF83yAA
      height: 720
    - title: Core
      file: app-variation-plot-as-input-core.py
      shinylive: https://shinylive.io/py/editor/#code=NobwRAdghgtgpmAXAAjFADugdOgnmAGlQGMB7CAFzkqVQEsZ1SAnC5GKC9AG1Iu7oAjHLh59kUAM7IeFADoQAZs1IwZUbvGbpqAcwCudCNIZNWyXlAAmAfR0QDRyQuWrkkgBZHcyUyzYAgphEzNRWcMxEhgoKGOg2hsgAvMiGOFC6cDaK3IZWABQKyMWpdFik+lyVdrwUhRAljchyYGLyhEVNxcQCxADWSQAqzPpwRMgAxMgAPNOdXVaC3D10-UMjY8VTs-NNHqQAbhHro+Pbcw1dyIIjniebkzMXjQCUBLstAMK9fYgt75dimkKlUKDYqAAPMFHZiCTgMQpgHp9f4ybhQYhwfbccLMe5vD5gAAiFSWcGQ31Wv3+u2BlXQ1Uh0IicIoCJai2W3BRhDRGKxpBxx2GowJgOaYAAEocIn8OuK6aDwXAoTYYaz2WAPAdmKiePzsbj8QDGi0AEK3Dw0hVlEEMsFMtUs+EwRE3Tx69GYw3CjZil4xCAKcKKdwRGH5Iz2oh2ypESRwSSSOjkF5-cUAAVCEFxOFq+Q0FCSLQCyC8kgopF0zFgLQD4pDaL4+TTu0aVlDKUstnsjmMLbbJQ4SeSyA7wBaglIVlwNmHkhsuhaAF1B8VBHRuNxR+PJ5vuDZuHoKB45zAV4GrmiKFhJMROFRmPl50QN1v61fZFgIejBHBuIiACyUjSPkugBmAH5XF+uC-v+iJmvuyAADLHh4yDPjAEFQV0X5svwcCIgACnohgNMBI4HNIiFbihaF1peJRZmEERYEyuyNsiLbpleoQUPozANFGlR5nwNgrP0A5Bpm2a5uxDZwKGnJca24qNHxAlCRA9qiWCyk-FJuzMTmrHye2illjq3FrsgGmCb42kiW0Nj7BG9ZGbJpkqvICmhu6HjWWpJR2VpOnOTc+ieIZ0lxKOQToAWmAJHQ8bhhERDhII+i6PiCi8mAFCiAgKAFd5YAAL7LkAA
      height: 720
---

:::{#example}
:::

:::{#relevant-functions}
:::

## Details

[Matplotlib](https://matplotlib.org/) is a popular Python library that can be used to create plots.

Follow three steps to display a Matplotlib figure in your app:


  1. Add `ui.output_plot()` to the UI of your app to create a div in which to display the figure.
  Where you call this function will determine where the figure will appear within the layout of the app.
  The `id` parameter you provide will be used to link to other parts of the Shiny app.

  2. Define a function within the `server()` function that creates the figure.

      - The name of the function should be the same value you passed into the `id` parameter
        in your `ui.output_plot()` function call in the UI.

      - If your function calls reactive values, Shiny will update your figure whenever those values change,
in a [reactive fashion](https://shiny.posit.co/py/docs/reactive-programming.html).

      - If you use `matplotlib.pyplot` to plot, your function does not need to return a value. Otherwise, your function should return one of the following objects:

          - A `matplotlib.figure.Figure` instance
          - A `matplotlib.artist.Artist` instance
          - A list/tuple of `Figure`/`Artist` instances
          - An object with a ‘figure’ attribute pointing to a `matplotlib.figure.Figure` instance
          - A `PIL.Image.Image` instance

  3. Decorate your plotting function with a `@render.plot()` decorator.

      - If your plotting function is not the same as the `id` you used in the `ui.output_plot()`, you can add an additional `@output(id=...)` decorator.
      - If you use the `@output()` decorator, make sure it is __above__ the `@render.plot()` decorator.


### Plots as Inputs


You can use a plot as an input widget, collecting the locations of user clicks, double clicks, hovers, and brushes. To do this, set one or more of the following arguments of `ui.output_plot()` to `True`:.

  1. `click` - When `click = True`, the plot will allow the user to click in the plotting area, and will send the coordinates of the click to the server, where they can be accessed as a reactive variable named `input.<id>_click()`, where `<id>` is the id of the plot. The input value will be a dictionary with x and y elements indicating the mouse position.

  2. `dblclick` - This is just like the click parameter, but for double-click events. The value can be accessed as `input.<id>_dblclick()`.

  3. `hover` - When `hover = True`, the plot will allow the user to hover over the plotting area, and will send the coordinates of the cursor to the server, where they can be accessed as a reactive variable named `input.<id>_hover()`, where `<id>` is the id of the plot. The input value will be a dictionary with x and y elements indicating the mouse position. To control the hover time or hover delay type, set `hover` to `hover_opts()`.

  4. `brush` - When `brush = True`, the plot will allow the user to “brush” in the plotting area, and will send information about the brushed area to the server, where it can be accessed as a reactive variable named `input.<id>_brush()`, where `<id>` is the id of the plot. Brushing means that the user will be able to draw a rectangle in the plotting area and drag it around. The value will be a named list with xmin, xmax, ymin, and ymax elements indicating the brush area. To control the brush behavior, set `brush` to `brush_opts()`.

  Multiple `output_image()`/`output_plot()` calls may share the same id value; brushing one image or plot will cause any other brushes with the same id to disappear.

## Variations

:::{#variations}
:::
