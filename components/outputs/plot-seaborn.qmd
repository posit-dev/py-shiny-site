---
title: "Plot (Seaborn)"
sidebar: components
preview: |
  <div class="px-3">
  <img style="width: 100%;height:auto;max-height:130px;" src="/images/seaborn.jpg">
  </div>
listing:
  id: component
  template: ../_partials/components-detail.ejs
  contents:
    - title: "Plot (Seaborn)"
      preview: https://shinylive.io/py/app/#h=0&code=NobwRAdghgtgpmAXGKAHVA6VBPMAaMAYwHsIAXOcpMASxlWICcyACAZzigCMmIWo27CGwA6EAGaNiMFqigAbeI1SUA5gFcawlnQbMW84lAAmAfRUQNW0RKky2ACy3Yd9JqwCC6PC0aVjcIw+mmJiaKimmiwAvCyaWFCqcKbi8prGABRiLHE0GFqo6mSmbPI0AYxZkCL4LDUAcuowXIEsxOIsXNY1PgCMfQAMAz4ATAMAlHjZuRjERYXFqIZkVUvEZDWTOQDEADy7YuOhEGIBHRyMAG6BGQVFPnNkCz4cbGw0pOOI0wACfhAVLDLLJ8HJghRkaI1DwsADKnB4jD4TjYZGIqkYsDafAsVj4PGMLhgAkEWhYGNgbAwNWm4x2+2mZ1kwK+9IOoLBsjUmm0sUMJnM3OsGSOHPBAA8YkIqSinsDjFAyFBorieWwfOKoWACdhTMS3qZVD1OtZoncyBgICLRZyclBxRgOMUyDQyPI4FUAAoKJQsT1C4Sbaac+2OuDFcXybhweRVACyJJYGVURzANttoadpmwUZasZqAGE5uQg2Kcn4yOokfxJSw9uzjuEpV5UBlwpEaC9AtcgiwAlx1KpogAVRjqODjMAAXwAukA
      height: 500px
      code: |4
          import seaborn as sns
          from palmerpenguins import load_penguins
          from shiny import App, render, ui

          app_ui = ui.page_fluid(
              ui.input_slider("n", "Number of bins", 1, 100, 20),
              ui.output_plot("plot"),  #<<
          )

          def server(input, output, session):
              @render.plot(
                  alt="A Seaborn histogram on penguin body mass in grams."
              )  #<<
              def plot():  #<<
                  penguins = load_penguins()
                  ax = sns.histplot(data=penguins, x="body_mass_g", bins=input.n())
                  ax.set_title("Palmer Penguins")
                  ax.set_xlabel("Mass (g)")
                  ax.set_ylabel("Count")
                  return ax  #<<

          app = App(app_ui, server, debug=True)

      relevantfunctions:
        - title: ui.output_plot
          href: https://shiny.posit.co/py/api/ui.output_plot.html
          signature: ui.output_plot(id, width='100%', height='400px', *, inline=False, click=False, dblclick=False, hover=False, brush=False, fill=MISSING)
        - title: "@render.plot"
          href: https://shiny.posit.co/py/api/render.plot.html
          signature: render.plot(_fn=None, *, alt=None, width=MISSING, height=MISSING, **kwargs)

---

:::{#component}
:::

## Details

Seaborn is a statistical plotting library that builds on top of Matplotlib.

Follow these steps to display a Seaborn figure in your app:


  1. Add `ui.output_plot()` to the UI of your app to create a div in which to display the figure.
  Where you call this function will determine where the figure will appear within the layout of the app.
  The `id` parameter you provide will be used to link to other parts of the Shiny app.
  
  2. Define a function within the `server()` function that creates the figure.
      
      - The name of the function should be the same value you passed into the `id` parameter
        in your `ui.output_plot()` function call in the UI.

      - If your function calls reactive values, Shiny will update your figure whenever those values change, in a [reactive fashion](https://shiny.posit.co/py/docs/reactive-programming.html).
        
      - Your function should return one of the following objects:</li>
        
          - A `matplotlib.figure.Figure` instance
          - A `matplotlib.artist.Artist` instance
          - A list/tuple of `Figure`/`Artist` instances
          - An object with a ‘figure’ attribute pointing to a `matplotlib.figure.Figure` instance
          - A `PIL.Image.Image` instance

  3. Decorate your plotting function with a `@render.plot()` decorator.

      - If your plotting function is not the same as the `id` you used in the `ui.output_plot()`, you can add an additional `@output(id=...)` decorator.
      - If you use the `@output()` decorator, make sure it is __above__ the `@render.plot()` decorator.

You can use a plot as an input widget, collecting the locations of user clicks, double clicks, hovers, and brushes. To do this, follow the instructions provided for [plots as inputs](plot-matplotlib.html#plots-as-inputs).

:::{#variations}
:::