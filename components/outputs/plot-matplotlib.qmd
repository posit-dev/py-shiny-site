---
title: "Plot (Matplotlib)"
sidebar: components
preview: |
  <div class="px-3">
  <img style="width: 100%;height:auto;max-height:130px;" src="/images/matplotlib.jpg">
  </div>
listing:
  - id: component
    template: ../_partials/components-detail.ejs
    contents:
      - title: "Plot (Matplotlib)"
        preview: https://shinylive.io/py/app/#h=0&code=NobwRAdghgtgpmAXGKAHVA6VBPMAaMAYwHsIAXOcpMASxlWICcyACGKM1AG2LK5oBGWbN14soAZxbcyAHQh0GzFhACu9bOKkRU8gGaNiMaVC7xGqSgHNVNCFMVNWPKABMA+pYg27E-YeMJAAs7TUdlAEF0PBZGSlc4RhjbeXk0VHdbFgBeFlssKCs4dz0uW1cACnkWGryaDDtUVTJ3CX4ExirIWXwWHoA5dQFElmI9FgFfHpiABhiARhm5lgAmGYBKPGra-OJmppbRMi6jns35ddSIeQTxiUSAN0SKxuaYvc43lnuJCRpSdaIbY1AACcQgHSwPGOpjI2R6ERYIQkZGIVkYsDOwJYt2k0IqgOxtRx41yLg8Xh89gJRNq7F+ORJwB6AmIrmw7npEncVh6AF0rsTiXoaFYYlAAB6MmQYCSqARHCQ0iBC2qSjDI45cmKvMgYCAEmIJew0MjYbIAFUYqjglxVqvEEtlcBaZFNXDgXQACqZzCwvdZbCqALKSH5Y+2q9X3FoSrhQYZcLqhhkVKyXMB2h2O50tbDxxNdAAilD+ZojtJqcTIqkYKpFvOuTfSjKiqAq6UyNBi90YTySOLgAlUVkt1tt8jAAF8+UA
        height: 500px
        code: |
          import matplotlib.pyplot as plt
          from palmerpenguins import load_penguins
          from shiny import App, render, ui

          app_ui = ui.page_fluid(
              ui.input_slider("n", "Number of bins", 0, 100, 20),
              ui.output_plot("plot"),  #<<
          )

          def server(input, output, session):
              @render.plot(alt="A histogram")  #<<
              def plot():  #<<
                  df = load_penguins()
                  mass = df["body_mass_g"]

                  fig, ax = plt.subplots()
                  ax.hist(mass, input.n(), density=True)
                  ax.set_title("Palmer Penguin Masses")
                  ax.set_xlabel("Mass (g)")
                  ax.set_ylabel("Density")

                  return fig  #<<

          app = App(app_ui, server, debug=True)

        relevantfunctions:
          - title: ui.output_plot
            href: https://shiny.posit.co/py/api/ui.output_plot.html
            signature: ui.output_plot(id, width='100%', height='400px', *, inline=False, click=False, dblclick=False, hover=False, brush=False, fill=MISSING)
          - title: "@render.plot"
            href: https://shiny.posit.co/py/api/render.plot.html
            signature: render.plot(_fn=None, *, alt=None, width=MISSING, height=MISSING, **kwargs)
  - id: variations
    template: ../_partials/components-variations.ejs
    contents:
      variations:
        - title: Plot as input
          description: Use the `click`, `dblclick`, `hover`, and `brush` arguments of `ui.output_plot()` to collect information about the user's mouse interactions as a reactive variable. The app below displays the values returned, but you can also call the values from within your computations to filter tables, perform calculations, and so on.
          preview: https://shinylive.io/py/app/#h=0&code=NobwRAdghgtgpmAXGKAHVA6VBPMAaMAYwHsIAXOcpMASxlWICcyACGKM1AG2LK5oBGWbN14soAZxbcyAHQgAzRsRjSoXeI1SUA5gFcaEKXQbMWPKABMA+toj7DE+UpUsJAC0PYWJpqwCC6HgsjJSWcIzBBvLyaKjWBiwAvCwGWFA6cNYKXAaWABTyLMWpNBjEepyVtjxkhRAljSyyYKJy+M0NTcWE-IQA1kkAKox6cMEAxAA8U0XdLJYCXL00A8Oj4yzTs13d7sQAbhHrY5Mzc90Cox4ncFvnuywAlHgXzWAAwn39iC2vj2kKlUyNYKAAPEFHRgCDh0QpELj9P7SLhQQhwfZccKMW4vN4tAAiFSWdy+qx+fzegMqqGq4MhERhZDhLUWy0RyO4aIxxCxxxGYzxjxaAAlDhFfvgqWUgbSQfTrFCmSywO4DoxOaj0Zjsbj-o0WgAha7uSkAmU0ulwCGKxmwmDwq4eTXcnX8jZCp4xCDhBRuCJQ-KGOXBWWVYISOASCQ0UhPX6PAACoR9ESwtXy6jISRa-hYngkZGIOkYsBaXsevpRvHy8bejUsfpSFhsdgcRlr9ZK7GjyQWCmALQExEs2GsPYk1h0LQAul3igIaFwuH3G4OwIvl9YuLoyO5xzBZ975iiyBgJIQOBRGPkJ8FN1wKyeZBgwaiBHAuPCALKSKT5HQvTAJ95hfbB30-eFDSXFcABld3cFhbxgICQO6F9mT4OB4QABV0AwGl-XsDikaDlxYeD7D3ctjxKZMwjTek3irXp+lrBMT1CMg9EYBpg0qdNeGsFYBk7CA3no1NGAwJjKzgP02VY9j5xCOBuN4nwIDlQSQUU74xIklNsRk605Dkv01RvOtHkaLieL4rSBLaax9kDCtDIY6TZIbeSWCddxlJsko7I0-iz2cq49A8MST29OI+0CVBM3QBIaAjAMImCcIBD0HRcTAABfGcgA
          height: 720px
          code: |
            import matplotlib.pyplot as plt
            from palmerpenguins import load_penguins
            from shiny import App, render, ui
            
            app_ui = ui.page_fluid(
                ui.output_plot(
                    "plot", 
                    click=True, #<<
                    dblclick=True, #<<
                    hover=True, #<<
                    brush=True #<<
                ),
                "Click:",
                ui.output_text_verbatim("clk", placeholder=True),
                "Double Click:",
                ui.output_text_verbatim("dblclk", placeholder=True),
                "Hover:",
                ui.output_text_verbatim("hvr", placeholder=True),
                "Brush",
                ui.output_text_verbatim("brsh", placeholder=True),
            )
            
            def server(input, output, session):
                @render.plot(alt="A histogram")
                def plot():
                    df = load_penguins()
                    mass = df["body_mass_g"]
                    bill = df["bill_length_mm"]
            
                    plt.scatter(mass, bill)
                    plt.xlabel("Mass (g)")
                    plt.ylabel("Bill Length (mm)")
                    plt.title("Penguin Mass vs Bill Length")
            
                @render.text
                def clk():
                    return input.plot_click()
            
                @render.text
                def dblclk():
                    return input.plot_dblclick()
            
                @render.text
                def hvr():
                    return input.plot_hover()
            
                @render.text
                def brsh():
                    return input.plot_brush()
                    
            app = App(app_ui, server, debug=True)
            
---

:::{#component}
:::

## Details

[Matplotlib](https://matplotlib.org/) is a popular Python library that can be used to create plots.

Follow three steps to display a Matplotlib figure in your app:


  1. Add `ui.output_plot()` to the UI of your app to create a div in which to display the figure.
  Where you call this function will determine where the figure will appear within the layout of the app.
  The `id` parameter you provide will be used to link to other parts of the Shiny app.
  
  2. Define a function within the `server()` function that creates the figure.

      - The name of the function should be the same value you passed into the `id` parameter
        in your `ui.output_plot()` function call in the UI.

      - If your function calls reactive values, Shiny will update your figure whenever those values change,
in a [reactive fashion](https://shiny.posit.co/py/docs/reactive-programming.html).

      - If you use `matplotlib.pyplot` to plot, your function does not need to return a value. Otherwise, your function should return one of the following objects:
          
          - A `matplotlib.figure.Figure` instance
          - A `matplotlib.artist.Artist` instance
          - A list/tuple of `Figure`/`Artist` instances
          - An object with a ‘figure’ attribute pointing to a `matplotlib.figure.Figure` instance
          - A `PIL.Image.Image` instance

  3. Decorate your plotting function with a `@render.plot()` decorator.
      
      - If your plotting function is not the same as the `id` you used in the `ui.output_plot()`, you can add an additional `@output(id=...)` decorator.
      - If you use the `@output()` decorator, make sure it is __above__ the `@render.plot()` decorator.


## Plots as Inputs


You can use a plot as an input widget, collecting the locations of user clicks, double clicks, hovers, and brushes. To do this, set one or more of the following arguments of `ui.output_plot()` to `True`:.

  1. `click` - When `click = True`, the plot will allow the user to click in the plotting area, and will send the coordinates of the click to the server, where they can be accessed as a reactive variable named `input.<id>_click()`, where `<id>` is the id of the plot. The input value will be a dictionary with x and y elements indicating the mouse position.
  
  2. `dblclick` - This is just like the click parameter, but for double-click events. The value can be accessed as `input.<id>_dblclick()`.
  
  3. `hover` - When `hover = True`, the plot will allow the user to hover over the plotting area, and will send the coordinates of the cursor to the server, where they can be accessed as a reactive variable named `input.<id>_hover()`, where `<id>` is the id of the plot. The input value will be a dictionary with x and y elements indicating the mouse position. To control the hover time or hover delay type, set `hover` to `hover_opts()`.
  
  4. `brush` - When `brush = True`, the plot will allow the user to “brush” in the plotting area, and will send information about the brushed area to the server, where it can be accessed as a reactive variable named `input.<id>_brush()`, where `<id>` is the id of the plot. Brushing means that the user will be able to draw a rectangle in the plotting area and drag it around. The value will be a named list with xmin, xmax, ymin, and ymax elements indicating the brush area. To control the brush behavior, set `brush` to `brush_opts()`.

  Multiple `output_image()`/`output_plot()` calls may share the same id value; brushing one image or plot will cause any other brushes with the same id to disappear.
  
:::{#variations}
:::