---
title: "Progress Bar"
sidebar: components 
previewapp: |
  import asyncio

  from shiny import App, reactive, render, ui
  from pathlib import Path
  appdir = Path(__file__).parent
  app_ui = ui.page_fillable(
    ui.include_css(appdir / "styles.css"),
    ui.input_action_button("button", "Compute"),
    ui.output_text("compute"),
    {"class": "vh-100 d-flex justify-content-center align-items-center px-4"}
  )

  def server(input, output, session):
    @output
    @render.text
    @reactive.event(input.button)
    async def compute():
        with ui.Progress(min=1, max=15) as p:
            p.set(message="Calculation in progress", detail="This may take a while...")

            for i in range(1, 15):
                p.set(i, message="Computing")
                await asyncio.sleep(0.1)

        return "Done computing!"

  app = App(app_ui, server)

  ## file: styles.css
  #shiny-notification-panel { max-width: 100%; }
listing:
  id: component
  template: ../_partials/components-detail.ejs
  contents:
    - title: Progress Bar
      preview: https://shinylive.io/py/app/#h=0&code=NobwRAdghgtgpmAXGKAHVA6VBPMAaMAYwHsIAXOcpMASxlWICcyACKAZ2wkJuIB0IAgGaNiMFuwAWNCNhZ0GzFgEF0eFozhRCZGgDc46zRAAmcRuoCuNAQLSoA+tZYBeFtaxQA5nAdCANtYmABQCLOHuNBgyqJZkDtq6pA4ARnFkpKFgaWQZgvgsfGAAwmKxFEUAlHhhER7EceUOFAAeZFkk9HFwVTUQlbamcEIS5gaMwTFx6g1k5erscOzsvP2IteEAArPlGyybxmaMGK1kewdaOvpwGHAG5JMQ5Rg5eQMQEWyc3CxmI53lODBSrrD6fCIAdxoZEkkQwAAVRF5NMtgjAZC4AIzqGBQFpYgCslS+LFQoPBFNJGEW7Xgy28cBcRWKUH8hEs-igSQ+MlJSJR7CK6jMZCgNH8TLAABVpOwWLi5KKANZwNgsCHSfw3DAYKqDSngoRMeTyD6MKAQHzBbEsTFE8kGymYGmTHFLdgMyWlLq6S16sGO8FQCFi1gcLg8YjUrVwVDBAAMGEx7z2n00ZEsjA+RQAIqRVQC4jIvABCIqDeyuFToYL2Jw0BZjcyVMAAXwAukA
      height: 200px
      code: |
        import asyncio

        from shiny import App, reactive, render, ui
        
        app_ui = ui.page_fluid(
            ui.input_action_button("button", "Compute"),
            ui.output_text("compute"),
        )
        
        def server(input, output, session):
            @output
            @render.text
            @reactive.event(input.button)
            async def compute():
                with ui.Progress(min=1, max=15) as p:
                    p.set(message="Calculation in progress", detail="This may take a while...")
        
                    for i in range(1, 15):
                        p.set(i, message="Computing")
                        await asyncio.sleep(0.1)
        
                return "Done computing!"
        
        app = App(app_ui, server)
      relevantfunctions:
        - title: "ui.Progress"
          href: https://shiny.posit.co/py/api/ui.Progress.html
          signature: ui.Progress(self, min=0, max=1, session=None)
        - title: "ui.Progress.close"
          href: https://shiny.posit.co/py/api/ui.Progress.html
          signature: ui.Progress.close(self)
        - title: "ui.Progress.inc"
          href: https://shiny.posit.co/py/api/ui.Progress.html
          signature: ui.Progress.inc(self, amount=0.1, message=None, detail=None)
        - title: "ui.Progress.set"
          href: https://shiny.posit.co/py/api/ui.Progress.html
          signature: ui.Progress.set(self, value=None, message=None, detail=None)

---

:::{#component}
:::

## Details

With Shiny, you can display a progress bar while a computation runs by running the computation bar within a special computation manager. Here's how: 

1. Use [`ui.Progress()`](https://shiny.posit.co/py/api/ui.Progress.html) to create a computation manager, and use `with` to run the computation within the manager. For example, you might set up a progress bar like this:

```{.python}
def compute():
  with ui.Progress(min=1, max=15) as p:
      #  computation
```

`ui.Progress()` creates a progress bar object that you can use to update the progress bar that is displayed during the computation.

2. Set the minimum and maximum values of the progress bar when you call `ui.Progress()`. These provide the outer bounds for the progress to display. For example, in the code above, when the bar is at 1, it would appear empty. When it is at 8, it would appear half full. When it is at 15, it would appear complete.

3. Update the progress bar object as the computation runs. Updating the object is simple: you can call its `set()` method to change the location of the progress bar, as well as the message it displays. For example the code below would update the progress bar above to half finished, and change the message that accompanies the bar to "Almost there!".

```{.python}
p.set(8, message="Almost there")
```

Finding opportunities to update the bar while the computation runs is more tricky. To have a responsive bar, you will need to interlace `set()` calls with the computation that runs. If the computation is a function from an external package, you may only be able to alert the user when the computation begins and when it finishes, which is unlikely to be satisfying:

```{.python}
async def compute():
with ui.Progress(min=1, max=15) as p:
    p.set(1, message="Here we go")
    # computation()
    p.set(15, message="Finished!")
```

If the computation involves separate functions run in sequence, you can update the progress bar after each function:

```{.python}
async def compute():
with ui.Progress(min=1, max=15) as p:
    p.set(1, message="Here we go")
    # computation1()
    p.set(5, message="Working hard")
    # computation2()
    p.set(10, message="Almost there")
    # computation3()
    p.set(15, message="Finished!")
```

If the computation is a function that you have written, you can write the function to accept a progress bar object to update as it runs.