---
title: "Arrange Elements"
description: >
  Layout elements into rows and columns that responsively adapt to a wide range of
  screen sizes.

listing:
- id: relevant-functions
  template: ../../components/_partials/components-detail-relevant-functions.ejs
  contents:
  - title: ui.layout_columns
    href: https://shiny.posit.co/py/api/ui.layout_columns.html
    signature: ui.layout_columns(*args, col_widths=None, row_heights=None, fill=True, fillable=True, gap=None, class_=None, height=None, **kwargs)
  - title: ui.layout_column_wrap
    href: https://shiny.posit.co/py/api/ui.layout_column_wrap.html
    signature: ui.layout_columns(*args, col_widths=None, row_heights=None, fill=True, fillable=True, gap=None, class_=None, height=None, **kwargs)
  - title: ui.page_fixed
    href: https://shiny.posit.co/py/api/ui.page_fixed.html
    signature: ui.page_fixed(*args, title=None, lang=None, **kwargs)
  - title: ui.page_fillable
    href: https://shiny.posit.co/py/api/ui.page_fillable.html
    signature: ui.page_fillable(*args, padding=None, gap=None, fillable_mobile=False, title=None, lang=None, **kwargs)
---

```{python}
#| include: false
import sys
sys.path.append("../..")

from docs.helpers import express_core_preview, shinylive_app_preview
```

Shiny provides two core functions for arranging elements into rows and columns:

-   `ui.layout_columns()` uses [Bootstrap's 12-column CSS Grid](https://getbootstrap.com/docs/5.3/layout/grid/) to create responsive and highly customizable layouts;

-   `ui.layout_column_wrap()` arranges elements into a grid with equally-sized cells.

You can use these functions directly to create your own layout.
Grid layouts can be used within a page, panel, or card and can even be nested within each other.

::: {#relevant-functions}
:::



## Grid Layouts

Both `ui.layout_columns()` and `ui.layout_column_wrap()` follow the same general pattern: pass each function a series of elements to have them arranged into a grid layout.

::: {.column-screen-inset-right style="max-width:800px;"}
```{python}
#| output: asis
#| echo: false

shinylive_app_preview("app-layout-columns-core.py", viewer_height=175, div_attrs='.p-0 .resize-inline')
express_core_preview("app-layout-columns-express.py", "app-layout-columns-core.py")
```

```{python}
#| output: asis
#| echo: false

shinylive_app_preview("app-layout-column-wrap-core.py", viewer_height=175, div_attrs='.p-0 .resize-inline')
express_core_preview("app-layout-column-wrap-express.py", "app-layout-column-wrap-core.py")
```
:::

Notice two things about the above apps:

1.  Both approaches create one or more rows, filling the rows with columns to hold its children.

2.  Use the handle in the bottom right corner of the apps above to view each layout at different screen sizes (this works best on desktop screens).
    How do the layouts shift as the screen gets smaller or larger?

### How to choose between `layout_columns()` and `layout_column_wrap()`

For simple layouts, it can be hard to tell `ui.layout_columns()` and `ui.layout_column_wrap()` apart.
Here's a short set of questions to ask yourself to help you decide which function to use:

1.  Are all of the items in your arrangement the same, such as a set of cards or plots?
    And do you want them all to have the same width and height?

    **If yes**: `ui.layout_column_wrap()` is best for a regularly-sized grid for a homogenous collection of elements.

2.  Do you want to customize the layout's column widths, or to have different layouts at different screen sizes (mobile vs desktop vs ultrawide)?

    **If yes:** `ui.layout_columns()` give you the tools to create highly customized, resposive column layouts.

3.  For all other uses, pick the function you like the most.
    I happen to like `ui.layout_columns()` but you might prefer `ui.layout_column_wrap()`.

### Responsive, configurable column layouts

In the example above, we saw that, without your intervention, `ui.layout_columns()` will arrange the elements given to it into evenly sized columns.
In the default case, `ui.layout_columns()` makes a choice about the column widths that make the most sense based on the number of items provided.

For example, when given three items, `ui.layout_columns()` places each item in a column with 4 width units.
You can use the `col_widths` argument to choose a different allocation of column width units.
Keep in mind that [Bootstrap's CSS Grid uses 12 units per row](https://getbootstrap.com/docs/5.3/layout/grid/).
In the example below, we use `col_widths=(2, 4, 6)` to create a row with a small, medium, and large card.

::: {.column-screen-inset-right style="max-width:800px;"}
```{python}
#| output: asis
#| echo: false

shinylive_app_preview("app-layout-columns-col-widths-core.py", viewer_height=240, div_attrs=".p-0 .resize-inline")
express_core_preview("app-layout-columns-col-widths-express.py", "app-layout-columns-col-widths-core.py")
```
:::

::: callout-tip
#### Advanced layouts

There's a lot more that `layout_columns()` can do with `col_widths` to make highly customized layouts.

-   Choose different layouts with a dictionary of column widths at specific breakpoints, e.g. `col_widths={"sm": 4, "md": (2, 4, 6)}`.

-   Insert empty space between items with a negative column width, e.g. `col_widths=c(4, -4, 4)` creates two columns 4 units wide with an empty space of 4 units between them.

Learn more in the API reference: [Express](https://shiny.posit.co/py/api/express/ui.layout_columns.html) \| [Core](https://shiny.posit.co/py/api/core/ui.layout_columns.html)
:::



### Uniform grid layouts

`ui.layout_column_wrap()` arranges elements into a uniform grid, so its `width` argument applies a single value to all elements in the grid.

When `width` is a fractional each item is given an equal portion of the row's width.
For example, `width=1 / 2` gives each item half of the row width.

::: {.column-screen-inset-right style="max-width:800px;"}
```{python}
#| output: asis
#| echo: false

shinylive_app_preview("app-layout-column-wrap-half-core.py", viewer_height=240, div_attrs=".p-0 .resize-inline")
express_core_preview("app-layout-column-wrap-half-express.py", "app-layout-column-wrap-half-core.py")
```
:::

When `width` is a CSS unit, like `"300px"`, `ui.layout_column_wrap()` ensures that every item is *at least as wide* as `width`.
The items in the grid expand to fill horizontal space or contract when the layout container is smaller than `width`.

Try resizing the app preview below to see how the layout shifts at different container widths.

::: {.column-screen-inset-right style="max-width:800px;"}
```{python}
#| output: asis
#| echo: false

shinylive_app_preview("app-layout-column-wrap-dynamic-core.py", viewer_height=240, div_attrs='.p-0 .resize-inline style="--max-width:1300px"')
express_core_preview("app-layout-column-wrap-dynamic-express.py", "app-layout-column-wrap-dynamic-core.py")
```
:::

## Column nesting

Both `ui.layout_columns()` and `ui.layout_column_wrap()` can be nested, even within each other.

Consider this page layout:

::: {.column-screen-inset-right style="max-width:800px;"}
```{python}
#| output: asis
#| echo: false

shinylive_app_preview("app-column-nest-core.py", viewer_height=200, div_attrs=".p-0")
express_core_preview("app-column-nest-express.py", "app-column-nest-core.py")
```
:::



## Controlling for page width and height

There are multiple types of Shiny grids: fluid, fixed, and fillable.
The fluid grid system is recommended for most applications and is the default for Shiny functions like `ui.page_navbar()` and `ui.page_sidebar()`.
So far, all the examples on this page have used the fluid grid system.

Each grid system uses a flexibly sub-dividable 12-column grid for layout.
They differ in how they interact with the viewer's browser window:

-   The fluid system always occupies the full width of the web page and re-sizes its components dynamically as the size of the page changes.

-   The fixed system occupies a fixed width of 940 pixels by default and may assume other widths when Bootstrap's responsive layout kicks in (e.g., when on a tablet).

-   The fillable system always occupies the full width *and height* of the web page and re-sizes its components dynamically as the size of the page changes.

!["Differences between the three systems"](/images/page-control.png){.pt-4}

### Fluid Grid System

::: {.column-screen-inset-right style="max-width:800px;"}
```{python}
#| output: asis
#| echo: false

shinylive_app_preview("app-page-fluid-core.py", viewer_height=500, div_attrs=".p-0")
express_core_preview("app-page-fluid-express.py", "app-page-fluid-core.py")
```
:::

To make a fluid grid that adapts to the width of the user's viewing window, build your app UI with [ui.page_fluid](https://shiny.posit.co/py/api/ui.page_fluid.html).

### Fixed Grid System

::: {.column-screen-inset-right style="max-width:800px;"}
```{python}
#| output: asis
#| echo: false

shinylive_app_preview("app-page-fixed-core.py", viewer_height=500, div_attrs=".p-0")
express_core_preview("app-page-fixed-express.py", "app-page-fixed-core.py")
```
:::

To make a fixed grid that maintains a constant maximum width, build your app UI with [ui.page_fluid](https://shiny.posit.co/py/api/ui.page_fluid.html).

The fixed grid system maintains a fixed page width of 940 pixels by default.
If Bootstrap responsive features are enabled (they are by default in Shiny) then the grid will also adapt to be 724px or 1170px wide depending on your viewport (e.g., when on a tablet).
The fixed system does this by using Bootstrap `.container`s, whereas the fluid system uses Bootstrap `.container-fluid`s.
Learn more about the difference [here](https://getbootstrap.com/docs/5.3/layout/containers/#how-they-work).

The main benefit of a fixed grid is that it provides stronger guarantees about how users will see the various elements of your UI laid out (because it's not being dynamically laid out according to the width of the browser).
The main drawback is that a fixed grid is more complex to work with.
In general, we recommend using a fluid grid unless you absolutely require the lower level layout control afforded by a fixed grid.

### Fillable Grid System

::: {.column-screen-inset-right style="max-width:800px;"}
```{python}
#| output: asis
#| echo: false

shinylive_app_preview("app-fillable-core.py", viewer_height=425, div_attrs=".p-0")
express_core_preview("app-fillable-express.py", "app-fillable-core.py")
```
:::

To make a fixed grid that maintains a constant maximum width, build your app UI with [ui.page_fillable](https://shiny.posit.co/py/api/ui.page_fillable.html).

`ui.page_fluid()` and `ui.page_fixed()` create web pages that are laid out from the top down, leaving whitespace at the bottom if the page content's height is smaller than the browser window, and scrolling if the content is larger than the window.

`ui.page_fillable()` is designed to latch the document body's size to the size of the window.
This makes it possible to fill it with content that also scales to the size of the window.

For example, `ui.page_fluid(ui.output_plot("plot", height="100%"))` will not work as expected.
The plot element's effective height will be 0 because the plot's containing elements (`<div>` and `<body>`) have automatic height.
They determine their own height based on the height of their contained elements.
However, `ui.page_fillable(ui.output_plot("plot", height="100%"))` will work as expected because `ui.page_fillable()` fixes the `<body>` height at 100% of the window height.

Note that `ui.page_fillable(ui.output_plot("plot"))` may not cause the plot to fill the page.
Like most Shiny output widgets, `ui.output_plot()`'s default height is a fixed number of pixels.
You must explicitly set `height="100%"` if you want a plot (or htmlwidget, say) to fill its container.

One must be careful what layouts/panels/elements come between the `ui.page_fillable()` and the plots/widgets.
Any container that has an automatic height will cause children with `height="100%"` to misbehave.
Stick to functions that are designed for fill layouts, such as the ones in the Shiny package.
